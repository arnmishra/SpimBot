For the SPIMBOT tournament, our strategy was to initially solve a static amount of puzzles. After gaining enough energy to last for a certain amount of time, the bots starts to catch and smash fruits. The idea was that we would find the optimal number of puzzles to solve so that we would never need to solve puzzles again. This would mean we would only call the puzzle code once at the start.

However, we came to realize that solving all the puzzles in the beginning put us very far behind and that we could solve puzzles while moving (albeit the movement slowed down). Therefore, we modified our tactics to make it so that we solve 10 puzzles everytime we run out of energy. We test 10, 15, and 20 puzzles; however, we couldn't determine if one was better than the other since the values of how many fruits we caught kept changing.

Furthermore, through thorough testing, we realized that the ideal smash count size was 1. So for every fruit, the bot goes to the bottom to smash the fruit it currently smooshed. The program finds the first fruit that is released from the fruit_data array and fixates on it's x and y values and moves the bot's x-value until it matches the fruit's x-value. 

Orginally, after we reached the x-value we would wait for the fruit to fall on us. However in order to optimize this feature from Lab10, we decided to start moving the bot upwards in the y-direction to catch the fruit faster. We also made it so that if the fruit's x-value starts to change, we will start to move left or right again to adjust course. 